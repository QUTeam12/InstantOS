                         4 .list
                         5 ***************************************************************
                         6 ** 各種レジスタ定義
                         7 ***************************************************************
                         8 ***************
                         9 ** レジスタ群の先頭
                        10 ***************
                        11 .equ REGBASE, 0xFFF000 | DMAP を使用．
                        12 .equ IOBASE, 0x00d00000
                        13 ***************
                        14 ** 割り込み関係のレジスタ
                        15 ***************
                        16 .equ IVR, REGBASE+0x300 | 割り込みベクタレジスタ
                        17 .equ IMR, REGBASE+0x304 | 割り込みマスクレジスタ
                        18 .equ ISR, REGBASE+0x30c | 割り込みステータスレジスタ
                        19 .equ IPR, REGBASE+0x310 | 割り込みペンディングレジスタ
                        20 ***************
                        21 ** タイマ関係のレジスタ
                        22 ***************
                        23 .equ TCTL1, REGBASE+0x600 | タイマ１コントロールレジスタ
                        24 .equ TPRER1, REGBASE+0x602 | タイマ１プリスケーラレジスタ
                        25 .equ TCMP1, REGBASE+0x604 | タイマ１コンペアレジスタ
                        26 .equ TCN1, REGBASE+0x608 | タイマ１カウンタレジスタ
                        27 .equ TSTAT1, REGBASE+0x60a | タイマ１ステータスレジスタ
                        28 ***************
                        29 ** UART1（送受信）関係のレジスタ
                        30 ***************
                        31 .equ USTCNT1, REGBASE+0x900 | UART1 ステータス/コントロールレジスタ
                        32 .equ UBAUD1, REGBASE+0x902 | UART1 ボーコントロールレジスタ
                        33 .equ URX1, REGBASE+0x904 | UART1 受信レジスタ
                        34 .equ UTX1, REGBASE+0x906 | UART1 送信レジスタ
                        35 ***************
                        36 ** LED
                        37 ***************
                        38 .equ LED7, IOBASE+0x000002f | ボード搭載の LED 用レジスタ
                        39 .equ LED6, IOBASE+0x000002d | 使用法については付録 A.4.3.1
                        40 .equ LED5, IOBASE+0x000002b
                        41 .equ LED4, IOBASE+0x0000029
                        42 .equ LED3, IOBASE+0x000003f
                        43 .equ LED2, IOBASE+0x000003d
                        44 .equ LED1, IOBASE+0x000003b
                        45 .equ LED0, IOBASE+0x0000039
                        46 **************
                        47 ** 推奨値
                        48 **************
                        49 .equ Mask_None,       0xFF3FFF
                        50 .equ Mask_UART1,      0xFF3FFB
                        51 .equ Mask_UART1_Timer,0xFF3FF9
                        52 **Timer
                        53 
                        54 **UART1
                        55 .equ U_Reset,   0x0000
                        56 .equ U_Putpull, 0xE100
                        57 .equ U_Putonly, 0xE108
                        58 .equ U_Pullonly,0xE10C
                        59 ***************************************************************
                        60 ** スタック領域の確保
                        61 ***************************************************************
                        62 .section .bss
                        63 .even
000650 0000 0000        64 SYS_STK:.ds.b 0x4000 | システムスタック領域
       0000 0000        64 
       0000 0000        64 
       0000 0000        64 
       0000 0000        64 
                        65 .even
                        66 SYS_STK_TOP: | システムスタック領域の最後尾
                        67 *****************************************************************
                        68 **キュー
                        69 *****************************************************************
004650 0000 0000        70 top0:		.ds.b	255			/*キューの戦闘の番地*/
       0000 0000        70 
       0000 0000        70 
       0000 0000        70 
       0000 0000        70 
00474f 00               71 bottom0:	.ds.b	1			/*キューの末尾の番地*/
004750 0000 0000        72 out0:		.ds.l	1			/*次に取り出すデータのある番地*/
004754 0000 0000        73 in0:		.ds.l	1 			/*次にデータを入れるべき番地*/
004758 0000 0000        74 s0:		.ds.l	1			/*キューに溜まっているデータの数*/
                        75 
00475c 0000 0000        76 top1:		.ds.b	255			/*キューの戦闘の番地*/
       0000 0000        76 
       0000 0000        76 
       0000 0000        76 
       0000 0000        76 
00485b 00               77 bottom1:	.ds.b	1			/*キューの末尾の番地*/
00485c 0000 0000        78 out1:		.ds.l	1			/*次に取り出すデータのある番地*/
004860 0000 0000        79 in1:		.ds.l	1 			/*次にデータを入れるべき番地*/
004864 0000 0000        80 s1:		.ds.l	1			/*キューに溜まっているデータの数*/
                        81 	
004868 0000 0000        82 out_data:	 .ds.l 	300
       0000 0000        82 
       0000 0000        82 
       0000 0000        82 
       0000 0000        82 
004d18 0000 0000        83 out_status:	 .ds.l 	300
       0000 0000        83 
       0000 0000        83 
       0000 0000        83 
       0000 0000        83 
0051c8 0000 0000        84 in_status:	 .ds.l 	300
       0000 0000        84 
       0000 0000        84 
       0000 0000        84 
       0000 0000        84 
005678 0000 0000        85 in_data:	 .ds.l	300
       0000 0000        85 
       0000 0000        85 
       0000 0000        85 
       0000 0000        85 
                        86 
                        87 ***************************************************************
                        88 ** 初期化
                        89 ** 内部デバイスレジスタには特定の値が設定されている．
                        90 ** その理由を知るには，付録 B にある各レジスタの仕様を参照すること．
                        91 ***************************************************************
                        92 .section .text
                        93 .even
                        94 boot: * スーパーバイザ & 各種設定を行っている最中の割込禁止
000400 46FC 2700        95 move.w #0x2700,%SR
000404 4FF9 0000        96 lea.l SYS_STK_TOP, %SP | Set SSP
       0000             96 
                        97 ****************
                        98 ** 割り込みコントローラの初期化
                        99 ****************
00040a 13FC 0040       100 move.b #0x40, IVR | ユーザ割り込みベクタ番号を0x40+level に設定．
       00FF F300       100 
000412 21FC 0000       101 move.l #HardwareInterface ,0x110
       0000 0110       101 
00041a 23FC 00FF       102 move.l #Mask_UART1,IMR | 送受信割り込み許可
       3FFB 00FF       102 
       F304            102 
                       103 ****************
                       104 ** 送受信 (UART1) 関係の初期化 (割り込みレベルは 4 に固定されている)
                       105 ****************
000424 33FC 0000       106 move.w #U_Reset, USTCNT1 | リセット
       00FF F900       106 
00042c 33FC E10C       107 move.w #U_Pullonly, USTCNT1 |　受信割り込み許可
       00FF F900       107 
000434 33FC 0038       108 move.w #0x0038, UBAUD1 | baud rate = 230400 bps
       00FF F902       108 
                       109 ****************
                       110 ** タイマ関係の初期化 (割り込みレベルは 6 に固定されている)
                       111 *****************
00043c 33FC 0004       112 move.w #0x0004, TCTL1 | restart, 割り込み不可,
       00FF F600       112 
                       113 | システムクロックの 1/16 を単位として計時，a
                       114 | タイマ使用停止
                       115 
                       116 **キュー初期化
000444 48E7 0080       117 	movem.l	%a0,-(%sp)	/*走行レベルの退避*/
000448 46FC 2700       118 	move.w 	#0x2700,%SR		/*割り込み禁止(走行レベル7)*/
00044c 41F9 0000       119 	lea.l	top0,%a0
       0000            119 
000452 23C8 0000       120 	move.l	%a0,in0
       0000            120 
000458 23C8 0000       121 	move.l  %a0,out0
       0000            121 
00045e 23FC 0000       122 	move.l	#0,s0
       0000 0000       122 
       0000            122 
000468 41F9 0000       123 	lea.l	top1,%a0
       0000            123 
00046e 23C8 0000       124 	move.l	%a0,in1
       0000            124 
000474 23C8 0000       125 	move.l  %a0,out1
       0000            125 
00047a 23FC 0000       126 	move.l	#0,s1
       0000 0000       126 
       0000            126 
000484 4CDF 0100       127 	movem.l (%sp)+,%a0      /* 走行レベルの復帰 */
                       128 **スタックレジスタ操作
000488 46FC 1000       129 move.w #0x1000, %SR
00048c 33FC 0861       130 move.w #0x0800+'a',UTX1 /* TODO: 消去(送信割り込みテスト用) */
       00FF F906       130 
000494 6000 0002       131 bra MAIN
                       132 ***************************************************************
                       133 **現段階での初期化ルーチンの正常動作を確認するため，最後に ’a’ を
                       134 **送信レジスタ UTX1 に書き込む．’a’ が出力されれば，OK.
                       135 ***************************************************************
                       136 .section .text
                       137 .even
                       138 MAIN:
000498 6000 FFFE       139 	bra MAIN
                       140 
                       141 INQ:
                       142 	**	番号noのキューにデータをいれる
                       143 	**	入力 no->d0.l	書き込む8bitdata->d1.b
                       144 	**	出力 失敗0/成功1 ->d0.l
00049c 40E7            145 	move.w 	%sr,-(%sp)		/*走行レベルの退避*/
00049e 46FC 2700       146 	move.w 	#0x2700,%sr		/*割り込み禁止(走行レベル7)*/
0004a2 48E7 00C0       147 	movem.l	%a0/%a1,-(%sp)		/*レジスタ退避*/
0004a6 0C80 0000       148 	cmp.l 	#0,%d0			/*キュー番号が0*/
       0000            148 
0004ac 6700 0010       149 	beq	INQ0
0004b0 0C80 0000       150 	cmp.l 	#1,%d0			/*キュー番号が1*/
       0001            150 
0004b6 6700 004A       151 	beq	INQ1
0004ba 4EFA 013A       152 	jmp	Queue_fail		/*キュー番号が存在しない*/
                       153 
                       154 	
                       155 INQ0:	
0004be 0CB9 0000       156 	cmp.l	#256,s0
       0100 0000       156 
       0000            156 
0004c8 6700 012C       157 	beq	Queue_fail		/*キューが満杯で失敗*/
0004cc 2079 0000       158 	move.l	in0,%a0			
       0000            158 
0004d2 1081            159 	move.b	%d1,(%a0)		/*データをキューに書き込み*/
0004d4 43F9 0000       160 	lea.l	bottom0,%a1
       0000            160 
0004da B1C9            161 	cmp.l	%a1,%a0
0004dc 6700 000C       162 	beq	INQ0_step1		/*in==bottomのときin=top*/
0004e0 52B9 0000       163 	add.l	#1,in0			/*in++*/
       0000            163 
0004e6 4EFA 000C       164 	jmp	INQ0_step2
                       165 
                       166 INQ0_step1:
0004ea 23F9 0000       167 	move.l top0,in0
       0000 0000       167 
       0000            167 
                       168 
                       169 INQ0_step2:
0004f4 52B9 0000       170 	add.l	#1,s0 			/*s++*/
       0000            170 
0004fa 7001            171 	move.l	#1,%d0			/*成功を報告*/
0004fc 4CDF 0300       172 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
000500 4E75            173 	rts
                       174 
                       175 INQ1:	
000502 0CB9 0000       176 	cmp.l	#256,s1
       0100 0000       176 
       0000            176 
00050c 6700 00E8       177 	beq	Queue_fail		/*キューが満杯で失敗*/
000510 2079 0000       178 	move.l	in1,%a0			
       0000            178 
000516 1081            179 	move.b	%d1,(%a0)		/*データをキューに書き込み*/
000518 43F9 0000       180 	lea.l	bottom1,%a1
       0000            180 
00051e B1C9            181 	cmp.l	%a1,%a0
000520 6700 000C       182 	beq	INQ1_step1		/*in==bottomのときin=top*/
000524 52B9 0000       183 	add.l	#1,in1			/*in++*/
       0000            183 
00052a 4EFA 000C       184 	jmp	INQ1_step2
                       185 
                       186 INQ1_step1:
00052e 23F9 0000       187 	move.l top1,in1
       0000 0000       187 
       0000            187 
                       188 
                       189 INQ1_step2:
000538 52B9 0000       190 	add.l	#1,s1 			/*s++*/
       0000            190 
00053e 7001            191 	move.l	#1,%d0			/*成功を報告*/
000540 4CDF 0300       192 	movem.l (%sp)+,%a0/%a1		/*レジスタ復帰*/
000544 46DF            193 	move.w 	(%sp)+,%sr		/*走行レベルの復帰*/
000546 4E75            194 	rts
                       195 
                       196 
                       197 OUTQ:
                       198 	**	番号noのキューからデータを一つ取り出す
                       199 	**	入力 no->d0.l
                       200 	**	出力 失敗0/成功1 ->d0.l		取り出した8bitdata ->d1.b
000548 40E7            201 	move.w 	%sr,-(%sp)		/*走行レベルの退避*/
00054a 46FC 2700       202 	move.w 	#0x2700,%sr		/*割り込み禁止(走行レベル7)*/
00054e 48E7 00C0       203 	movem.l	%a0/%a1,-(%sp)		/*レジスタ退避*/
000552 0C80 0000       204 	cmp.l 	#0,%d0			/*キュー番号が0*/
       0000            204 
000558 6700 0010       205 	beq	OUTQ0
00055c 0C80 0000       206 	cmp.l 	#1,%d0			/*キュー番号が1*/
       0001            206 
000562 6700 004C       207 	beq	OUTQ1
000566 4EFA 008E       208 	jmp	Queue_fail		/*キュー番号が存在しない*/
                       209 	
                       210 
                       211 OUTQ0:	
00056a 0CB9 0000       212 	cmp.l	#0,s0
       0000 0000       212 
       0000            212 
000574 6700 0080       213 	beq	Queue_fail		/*キューが満杯で失敗*/
000578 2079 0000       214 	move.l	out0,%a0			
       0000            214 
00057e 1210            215 	move.b	(%a0),%d1		/*データをキューから取り出し*/
000580 43F9 0000       216 	lea.l	bottom0,%a1
       0000            216 
000586 B1C9            217 	cmp.l	%a1,%a0
000588 6700 000C       218 	beq	OUTQ0_step1		/*out==bottomのときout=top*/
00058c 52B9 0000       219 	add.l	#1,out0			/*out++*/
       0000            219 
000592 4EFA 000C       220 	jmp	OUTQ0_step2
                       221 
                       222 OUTQ0_step1:
000596 23F9 0000       223 	move.l top0,out0
       0000 0000       223 
       0000            223 
                       224 
                       225 OUTQ0_step2:
0005a0 53B9 0000       226 	sub.l	#1,s0 			/*s--*/
       0000            226 
0005a6 7001            227 	move.l	#1,%d0			/*成功を報告*/
0005a8 4CDF 0300       228 	movem.l (%sp)+,%a0/%a1		/*レジスタ復帰*/
0005ac 46DF            229 	move.w 	(%sp)+,%sr		/*走行レベルの復帰*/
0005ae 4E75            230 	rts
                       231 
                       232 OUTQ1:	
0005b0 0CB9 0000       233 	cmp.l	#0,s1
       0000 0000       233 
       0000            233 
0005ba 6700 003A       234 	beq	Queue_fail		/*キューが満杯で失敗*/
0005be 2079 0000       235 	move.l	out1,%a0			
       0000            235 
0005c4 1210            236 	move.b	(%a0),%d1		/*データをキューから取り出し*/
0005c6 43F9 0000       237 	lea.l	bottom1,%a1
       0000            237 
0005cc B1C9            238 	cmp.l	%a1,%a0
0005ce 6700 000C       239 	beq	OUTQ1_step1		/*out==bottomのときout=top*/
0005d2 52B9 0000       240 	add.l	#1,out1			/*out++*/
       0000            240 
0005d8 4EFA 000C       241 	jmp	OUTQ1_step2
                       242 
                       243 OUTQ1_step1:
0005dc 23F9 0000       244 	move.l top1,out1
       0000 0000       244 
       0000            244 
                       245 
                       246 OUTQ1_step2:
0005e6 53B9 0000       247 	sub.l	#1,s1 			/*s--*/
       0000            247 
0005ec 7001            248 	move.l	#1,%d0			/*成功を報告*/
0005ee 4CDF 0300       249 	movem.l (%sp)+,%a0/%a1		/*レジスタ復帰*/
0005f2 46DF            250 	move.w 	(%sp)+,%sr		/*走行レベルの復帰*/
0005f4 4E75            251 	rts
                       252 
                       253 	
                       254 Queue_fail:
0005f6 7000            255 	move.l #0,%d0			/*失敗の報告*/
0005f8 4CDF 0300       256 	movem.l (%sp)+,%a0/%a1		/*レジスタ復帰*/
0005fc 46DF            257 	move.w 	(%sp)+,%sr		/*走行レベルの復帰*/
0005fe 4E75            258 	rts
                       259 INTERPUT:
000600 46FC 2700       260 	move.w	#0x2700,%SR 	/*割り込み禁止（走行レベルを７に設定）*/
000604 0C81 0000       261 	cmp.l 	#0,%d1
       0000            261 
00060a 6600 0026       262 	bne	INTERPUT_END		/*chが0でないなら何もせずに復帰*/
                       263 
00060e 4EBA FF38       264 	jsr	OUTQ		/*data->%D1.b  %D0に結果を格納*/
000612 0C80 0000       265 	cmp.l	#0,%d0
       0000            265 
000618 6700 0010       266 	beq	INTERPUT_fail
                       267 
00061c 0041 0800       268 	ori.w	#0x0800,%d1
000620 33C1 00FF       269 	move.w	%d1,UTX1	/*符号拡張してdataをUTX1に格納*/
       F906            269 
000626 4EFA 000A       270 	jmp 	INTERPUT_END
                       271 
                       272 INTERPUT_fail:
00062a 33FC E108       273 	move.w	#0xE108,USTCNT1	/*OUTQが失敗なら送信割り込み禁止にして復帰*/
       00FF F900       273 
                       274 
                       275 INTERPUT_END:
000632 4CDF FFFE       276 	movem.l (%sp)+,%a0-%a7/%d1-%d7
000636 4E73            277 	rte
                       278 HardwareInterface: 
000638 48E7 7FFF       279 	movem.l %a0-%a7/%d1-%d7, -(%sp)
00063c 3239 00FF       280 	move.w UTX1,%d1
       F906            280 
000642 0241 4000       281 	and.w #0x4000,%d1 
000646 0C41 4000       282 	cmp #0x4000,%d1
00064a 6700 FFB4       283 	beq INTERPUT
00064e 4E73            284 	rte
                       285 
                       286 .end
