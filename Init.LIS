                         4 .list
                         5 ***************************************************************
                         6 ** 各種レジスタ定義
                         7 ***************************************************************
                         8 ***************
                         9 ** レジスタ群の先頭
                        10 ***************
                        11 .equ REGBASE, 0xFFF000 | DMAP を使用．
                        12 .equ IOBASE, 0x00d00000
                        13 ***************
                        14 ** 割り込み関係のレジスタ
                        15 ***************
                        16 .equ IVR, REGBASE+0x300 | 割り込みベクタレジスタ
                        17 .equ IMR, REGBASE+0x304 | 割り込みマスクレジスタ
                        18 .equ ISR, REGBASE+0x30c | 割り込みステータスレジスタ
                        19 .equ IPR, REGBASE+0x310 | 割り込みペンディングレジスタ
                        20 ***************
                        21 ** タイマ関係のレジスタ
                        22 ***************
                        23 .equ TCTL1, REGBASE+0x600 | タイマ１コントロールレジスタ
                        24 .equ TPRER1, REGBASE+0x602 | タイマ１プリスケーラレジスタ
                        25 .equ TCMP1, REGBASE+0x604 | タイマ１コンペアレジスタ
                        26 .equ TCN1, REGBASE+0x608 | タイマ１カウンタレジスタ
                        27 .equ TSTAT1, REGBASE+0x60a | タイマ１ステータスレジスタ
                        28 ***************
                        29 ** UART1（送受信）関係のレジスタ
                        30 ***************
                        31 .equ USTCNT1, REGBASE+0x900 | UART1 ステータス/コントロールレジスタ
                        32 .equ UBAUD1, REGBASE+0x902 | UART1 ボーコントロールレジスタ
                        33 .equ URX1, REGBASE+0x904 | UART1 受信レジスタ
                        34 .equ UTX1, REGBASE+0x906 | UART1 送信レジスタ
                        35 ***************
                        36 ** LED
                        37 ***************
                        38 .equ LED7, IOBASE+0x000002f | ボード搭載の LED 用レジスタ
                        39 .equ LED6, IOBASE+0x000002d | 使用法については付録 A.4.3.1
                        40 .equ LED5, IOBASE+0x000002b
                        41 .equ LED4, IOBASE+0x0000029
                        42 .equ LED3, IOBASE+0x000003f
                        43 .equ LED2, IOBASE+0x000003d
                        44 .equ LED1, IOBASE+0x000003b
                        45 .equ LED0, IOBASE+0x0000039
                        46 **************
                        47 ** 推奨値
                        48 **************
                        49 .equ Mask_None,       0xFF3FFF
                        50 .equ Mask_UART1,      0xFF3FFB
                        51 .equ Mask_UART1_Timer,0xFF3FF9
                        52 **Timer
                        53 
                        54 **UART1
                        55 .equ U_Reset,   0x0000
                        56 .equ U_Putpull, 0xE100
                        57 .equ U_Putonly, 0xE108
                        58 .equ U_Pullonly,0xE10C
                        59 ***************************************************************
                        60 ** スタック領域の確保
                        61 ***************************************************************
                        62 .section .bss
                        63 .even
000648 0000 0000        64 SYS_STK:.ds.b 0x4000 | システムスタック領域
       0000 0000        64 
       0000 0000        64 
       0000 0000        64 
       0000 0000        64 
                        65 .even
                        66 SYS_STK_TOP: | システムスタック領域の最後尾
                        67 *****************************************************************
                        68 **キュー
                        69 *****************************************************************
004648 0000 0000        70 top0:		.ds.b	255			/*キューの戦闘の番地*/
       0000 0000        70 
       0000 0000        70 
       0000 0000        70 
       0000 0000        70 
004747 00               71 bottom0:	.ds.b	1			/*キューの末尾の番地*/
004748 0000 0000        72 out0:		.ds.l	1			/*次に取り出すデータのある番地*/
00474c 0000 0000        73 in0:		.ds.l	1 			/*次にデータを入れるべき番地*/
004750 0000 0000        74 s0:		.ds.l	1			/*キューに溜まっているデータの数*/
                        75 
004754 0000 0000        76 top1:		.ds.b	255			/*キューの戦闘の番地*/
       0000 0000        76 
       0000 0000        76 
       0000 0000        76 
       0000 0000        76 
004853 00               77 bottom1:	.ds.b	1			/*キューの末尾の番地*/
004854 0000 0000        78 out1:		.ds.l	1			/*次に取り出すデータのある番地*/
004858 0000 0000        79 in1:		.ds.l	1 			/*次にデータを入れるべき番地*/
00485c 0000 0000        80 s1:		.ds.l	1			/*キューに溜まっているデータの数*/
                        81 	
004860 0000 0000        82 out_data:	 .ds.l 	300
       0000 0000        82 
       0000 0000        82 
       0000 0000        82 
       0000 0000        82 
004d10 0000 0000        83 out_status:	 .ds.l 	300
       0000 0000        83 
       0000 0000        83 
       0000 0000        83 
       0000 0000        83 
0051c0 0000 0000        84 in_status:	 .ds.l 	300
       0000 0000        84 
       0000 0000        84 
       0000 0000        84 
       0000 0000        84 
005670 0000 0000        85 in_data:	 .ds.l	300
       0000 0000        85 
       0000 0000        85 
       0000 0000        85 
       0000 0000        85 
                        86 
                        87 ***************************************************************
                        88 ** 初期化
                        89 ** 内部デバイスレジスタには特定の値が設定されている．
                        90 ** その理由を知るには，付録 B にある各レジスタの仕様を参照すること．
                        91 ***************************************************************
                        92 .section .text
                        93 .even
                        94 boot: * スーパーバイザ & 各種設定を行っている最中の割込禁止
000400 46FC 2700        95 move.w #0x2700,%SR
000404 4FF9 0000        96 lea.l SYS_STK_TOP, %SP | Set SSP
       0000             96 
                        97 ****************
                        98 ** 割り込みコントローラの初期化
                        99 ****************
00040a 13FC 0040       100 move.b #0x40, IVR | ユーザ割り込みベクタ番号を0x40+level に設定．
       00FF F300       100 
000412 21FC 0000       101 move.l #HardwareInterface ,0x110
       0000 0110       101 
00041a 23FC 00FF       102 move.l #Mask_UART1,IMR | 送受信割り込み許可
       3FFB 00FF       102 
       F304            102 
                       103 ****************
                       104 ** 送受信 (UART1) 関係の初期化 (割り込みレベルは 4 に固定されている)
                       105 ****************
000424 33FC 0000       106 move.w #U_Reset, USTCNT1 | リセット
       00FF F900       106 
00042c 33FC E10C       107 move.w #U_Pullonly, USTCNT1 |　受信割り込み許可
       00FF F900       107 
000434 33FC 0038       108 move.w #0x0038, UBAUD1 | baud rate = 230400 bps
       00FF F902       108 
                       109 ****************
                       110 ** タイマ関係の初期化 (割り込みレベルは 6 に固定されている)
                       111 *****************
00043c 33FC 0004       112 move.w #0x0004, TCTL1 | restart, 割り込み不可,
       00FF F600       112 
                       113 | システムクロックの 1/16 を単位として計時，a
                       114 | タイマ使用停止
                       115 
                       116 **キュー初期化
000444 48E7 0080       117 	movem.l	%a0,-(%sp)	/*走行レベルの退避*/
000448 46FC 2700       118 	move.w 	#0x2700,%SR		/*割り込み禁止(走行レベル7)*/
00044c 41F9 0000       119 	lea.l	top0,%a0
       0000            119 
000452 23C8 0000       120 	move.l	%a0,in0
       0000            120 
000458 23C8 0000       121 	move.l  %a0,out0
       0000            121 
00045e 23FC 0000       122 	move.l	#0,s0
       0000 0000       122 
       0000            122 
000468 41F9 0000       123 	lea.l	top1,%a0
       0000            123 
00046e 23C8 0000       124 	move.l	%a0,in1
       0000            124 
000474 23C8 0000       125 	move.l  %a0,out1
       0000            125 
00047a 23FC 0000       126 	move.l	#0,s1
       0000 0000       126 
       0000            126 
000484 4CDF 0100       127 	movem.l (%sp)+,%a0      /* 走行レベルの復帰 */
                       128 **スタックレジスタ操作
000488 46FC 1000       129 move.w #0x1000, %SR
00048c 33FC 0861       130 move.w #0x0800+'a',UTX1 /* TODO: 消去(送信割り込みテスト用) */
       00FF F906       130 
000494 6000 0002       131 bra MAIN
                       132 ***************************************************************
                       133 **現段階での初期化ルーチンの正常動作を確認するため，最後に ’a’ を
                       134 **送信レジスタ UTX1 に書き込む．’a’ が出力されれば，OK.
                       135 ***************************************************************
                       136 .section .text
                       137 .even
                       138 MAIN:
000498 6000 FFFE       139 	bra MAIN
                       140 
                       141 INQ:
                       142 	**	番号noのキューにデータをいれる
                       143 	**	入力 no->d0.l	書き込む8bitdata->d1.b
                       144 	**	出力 失敗0/成功1 ->d0.l
00049c 48E7 00C0       145 	movem.l	%a0/%a1,-(%sp)	/*走行レベルの退避*/
0004a0 46FC 2700       146 	move.w 	#0x2700,%SR		/*割り込み禁止(走行レベル7)*/
0004a4 0C80 0000       147 	cmp.l 	#0,%d0			/*キュー番号が0*/
       0000            147 
0004aa 6700 0010       148 	beq	INQ0
0004ae 0C80 0000       149 	cmp.l 	#1,%d0			/*キュー番号が1*/
       0001            149 
0004b4 6700 004A       150 	beq	INQ1
0004b8 4EFA 0132       151 	jmp	Queue_fail		/*キュー番号が存在しない*/
                       152 
                       153 	
                       154 INQ0:	
0004bc 0CB9 0000       155 	cmp.l	#256,s0
       0100 0000       155 
       0000            155 
0004c6 6700 0124       156 	beq	Queue_fail		/*キューが満杯で失敗*/
0004ca 2079 0000       157 	move.l	in0,%a0			
       0000            157 
0004d0 1081            158 	move.b	%d1,(%a0)		/*データをキューに書き込み*/
0004d2 43F9 0000       159 	lea.l	bottom0,%a1
       0000            159 
0004d8 B1C9            160 	cmp.l	%a1,%a0
0004da 6700 000C       161 	beq	INQ0_step1		/*in==bottomのときin=top*/
0004de 52B9 0000       162 	add.l	#1,in0			/*in++*/
       0000            162 
0004e4 4EFA 000C       163 	jmp	INQ0_step2
                       164 
                       165 INQ0_step1:
0004e8 23F9 0000       166 	move.l top0,in0
       0000 0000       166 
       0000            166 
                       167 
                       168 INQ0_step2:
0004f2 52B9 0000       169 	add.l	#1,s0 			/*s++*/
       0000            169 
0004f8 7001            170 	move.l	#1,%d0			/*成功を報告*/
0004fa 4CDF 0300       171 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
0004fe 4E75            172 	rts
                       173 
                       174 INQ1:	
000500 0CB9 0000       175 	cmp.l	#256,s1
       0100 0000       175 
       0000            175 
00050a 6700 00E0       176 	beq	Queue_fail		/*キューが満杯で失敗*/
00050e 2079 0000       177 	move.l	in1,%a0			
       0000            177 
000514 1081            178 	move.b	%d1,(%a0)		/*データをキューに書き込み*/
000516 43F9 0000       179 	lea.l	bottom1,%a1
       0000            179 
00051c B1C9            180 	cmp.l	%a1,%a0
00051e 6700 000C       181 	beq	INQ1_step1		/*in==bottomのときin=top*/
000522 52B9 0000       182 	add.l	#1,in1			/*in++*/
       0000            182 
000528 4EFA 000C       183 	jmp	INQ1_step2
                       184 
                       185 INQ1_step1:
00052c 23F9 0000       186 	move.l top1,in1
       0000 0000       186 
       0000            186 
                       187 
                       188 INQ1_step2:
000536 52B9 0000       189 	add.l	#1,s1 			/*s++*/
       0000            189 
00053c 7001            190 	move.l	#1,%d0			/*成功を報告*/
00053e 4CDF 0300       191 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
000542 4E75            192 	rts
                       193 
                       194 
                       195 OUTQ:
                       196 	**	番号noのキューからデータを一つ取り出す
                       197 	**	入力 no->d0.l
                       198 	**	出力 失敗0/成功1 ->d0.l		取り出した8bitdata ->d1.b
000544 48E7 00C0       199 	movem.l	%a0/%a1,-(%sp)	/*走行レベルの退避*/
000548 46FC 2700       200 	move.w 	#0x2700,%SR		/*割り込み禁止(走行レベル7)*/
00054c 0C80 0000       201 	cmp.l 	#0,%d0			/*キュー番号が0*/
       0000            201 
000552 6700 0010       202 	beq	OUTQ0
000556 0C80 0000       203 	cmp.l 	#1,%d0			/*キュー番号が1*/
       0001            203 
00055c 6700 004A       204 	beq	OUTQ1
000560 4EFA 008A       205 	jmp	Queue_fail		/*キュー番号が存在しない*/
                       206 	
                       207 
                       208 OUTQ0:	
000564 0CB9 0000       209 	cmp.l	#0,s0
       0000 0000       209 
       0000            209 
00056e 6700 007C       210 	beq	Queue_fail		/*キューが満杯で失敗*/
000572 2079 0000       211 	move.l	out0,%a0			
       0000            211 
000578 1210            212 	move.b	(%a0),%d1		/*データをキューから取り出し*/
00057a 43F9 0000       213 	lea.l	bottom0,%a1
       0000            213 
000580 B1C9            214 	cmp.l	%a1,%a0
000582 6700 000C       215 	beq	OUTQ0_step1		/*out==bottomのときout=top*/
000586 52B9 0000       216 	add.l	#1,out0			/*out++*/
       0000            216 
00058c 4EFA 000C       217 	jmp	OUTQ0_step2
                       218 
                       219 OUTQ0_step1:
000590 23F9 0000       220 	move.l top0,out0
       0000 0000       220 
       0000            220 
                       221 
                       222 OUTQ0_step2:
00059a 53B9 0000       223 	sub.l	#1,s0 			/*s--*/
       0000            223 
0005a0 7001            224 	move.l	#1,%d0			/*成功を報告*/
0005a2 4CDF 0300       225 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
0005a6 4E75            226 	rts
                       227 
                       228 OUTQ1:	
0005a8 0CB9 0000       229 	cmp.l	#0,s1
       0000 0000       229 
       0000            229 
0005b2 6700 0038       230 	beq	Queue_fail		/*キューが満杯で失敗*/
0005b6 2079 0000       231 	move.l	out1,%a0			
       0000            231 
0005bc 1210            232 	move.b	(%a0),%d1		/*データをキューから取り出し*/
0005be 43F9 0000       233 	lea.l	bottom1,%a1
       0000            233 
0005c4 B1C9            234 	cmp.l	%a1,%a0
0005c6 6700 000C       235 	beq	OUTQ1_step1		/*out==bottomのときout=top*/
0005ca 52B9 0000       236 	add.l	#1,out1			/*out++*/
       0000            236 
0005d0 4EFA 000C       237 	jmp	OUTQ1_step2
                       238 
                       239 OUTQ1_step1:
0005d4 23F9 0000       240 	move.l top1,out1
       0000 0000       240 
       0000            240 
                       241 
                       242 OUTQ1_step2:
0005de 53B9 0000       243 	sub.l	#1,s1 			/*s--*/
       0000            243 
0005e4 7001            244 	move.l	#1,%d0			/*成功を報告*/
0005e6 4CDF 0300       245 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
0005ea 4E75            246 	rts
                       247 
                       248 	
                       249 Queue_fail:
0005ec 7000            250 	move.l #0,%d0			/*失敗の報告*/
0005ee 4CDF 0300       251 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
0005f2 4E75            252 	rts
                       253 INTERPUT_PREPARE:
                       254 	/* ch=%d1.L=0 */
                       255 INTERPUT:
0005f4 13FC 0031       256 	move.b #'1',LED7
       00D0 002F       256 
0005fc 4CDF FFFE       257 	movem.l (%sp)+,%a0-%a7/%d1-%d7
000600 4E73            258 	rte
                       259 interupt:
000602 48E7 7FFF       260 	movem.l %a0-%a7/%d1-%d7, -(%sp)
000606 3039 00FF       261 	move.w URX1, %d0
       F904            261 
00060c 0640 0800       262 	add.w #0x0800,%d0
000610 33C0 00FF       263 	move.w %d0,UTX1
       F906            263 
000616 4CDF FFFE       264 	movem.l (%sp)+,%a0-%a7/%d1-%d7
00061a 4E73            265 	rte
                       266 sousin:
00061c 48E7 7FFF       267 	movem.l %a0-%a7/%d1-%d7, -(%sp)
000620 33FC 0862       268 	move.w #0x0800+'b',UTX1
       00FF F906       268 
000628 4CDF FFFE       269 	movem.l (%sp)+,%a0-%a7/%d1-%d7
00062c 4E73            270 	rte
                       271 HardwareInterface: 
00062e 48E7 7FFF       272 	movem.l %a0-%a7/%d1-%d7, -(%sp)
000632 3239 00FF       273 	move.w UTX1,%d1
       F906            273 
000638 0241 4000       274 	and.w #0x4000,%d1 
00063c 0C41 4000       275 	cmp #0x4000,%d1
000640 6700 FFB2       276 	beq INTERPUT /* TODO: テスト後INTERPUT_PREPAREにする */
000644 4E73            277 	rte
                       278 
                       279 .end
