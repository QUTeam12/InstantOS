                         4 .list
                         5 ***************************************************************
                         6 ** 各種レジスタ定義
                         7 ***************************************************************
                         8 ***************
                         9 ** レジスタ群の先頭
                        10 ***************
                        11 .equ REGBASE, 0xFFF000 | DMAP を使用．
                        12 .equ IOBASE, 0x00d00000
                        13 ***************
                        14 ** 割り込み関係のレジスタ
                        15 ***************
                        16 .equ IVR, REGBASE+0x300 | 割り込みベクタレジスタ
                        17 .equ IMR, REGBASE+0x304 | 割り込みマスクレジスタ
                        18 .equ ISR, REGBASE+0x30c | 割り込みステータスレジスタ
                        19 .equ IPR, REGBASE+0x310 | 割り込みペンディングレジスタ
                        20 ***************
                        21 ** タイマ関係のレジスタ
                        22 ***************
                        23 .equ TCTL1, REGBASE+0x600 | タイマ１コントロールレジスタ
                        24 .equ TPRER1, REGBASE+0x602 | タイマ１プリスケーラレジスタ
                        25 .equ TCMP1, REGBASE+0x604 | タイマ１コンペアレジスタ
                        26 .equ TCN1, REGBASE+0x608 | タイマ１カウンタレジスタ
                        27 .equ TSTAT1, REGBASE+0x60a | タイマ１ステータスレジスタ
                        28 ***************
                        29 ** UART1（送受信）関係のレジスタ
                        30 ***************
                        31 .equ USTCNT1, REGBASE+0x900 | UART1 ステータス/コントロールレジスタ
                        32 .equ UBAUD1, REGBASE+0x902 | UART1 ボーコントロールレジスタ
                        33 .equ URX1, REGBASE+0x904 | UART1 受信レジスタ
                        34 .equ UTX1, REGBASE+0x906 | UART1 送信レジスタ
                        35 ***************
                        36 ** LED
                        37 ***************
                        38 .equ LED7, IOBASE+0x000002f | ボード搭載の LED 用レジスタ
                        39 .equ LED6, IOBASE+0x000002d | 使用法については付録 A.4.3.1
                        40 .equ LED5, IOBASE+0x000002b
                        41 .equ LED4, IOBASE+0x0000029
                        42 .equ LED3, IOBASE+0x000003f
                        43 .equ LED2, IOBASE+0x000003d
                        44 .equ LED1, IOBASE+0x000003b
                        45 .equ LED0, IOBASE+0x0000039
                        46 **************
                        47 ** 推奨値
                        48 **************
                        49 .equ Mask_None,       0xFF3FFF
                        50 .equ Mask_UART1,      0xFF3FFB
                        51 .equ Mask_UART1_Timer,0xFF3FF9
                        52 **Timer
                        53 
                        54 **UART1
                        55 .equ U_Reset,   0x0000
                        56 .equ U_Putpull, 0xE100
                        57 .equ U_Putonly, 0xE108
                        58 .equ U_Pullonly,0xE10C
                        59 ***************************************************************
                        60 ** スタック領域の確保
                        61 ***************************************************************
                        62 .section .bss
                        63 .even
000618 0000 0000        64 SYS_STK:.ds.b 0x4000 | システムスタック領域
       0000 0000        64 
       0000 0000        64 
       0000 0000        64 
       0000 0000        64 
                        65 .even
                        66 SYS_STK_TOP: | システムスタック領域の最後尾
                        67 *****************************************************************
                        68 **キュー
                        69 *****************************************************************
004618 0000 0000        70 top0:		.ds.b	255			/*キューの戦闘の番地*/
       0000 0000        70 
       0000 0000        70 
       0000 0000        70 
       0000 0000        70 
004717 00               71 bottom0:	.ds.b	1			/*キューの末尾の番地*/
004718 0000 0000        72 out0:		.ds.l	1			/*次に取り出すデータのある番地*/
00471c 0000 0000        73 in0:		.ds.l	1 			/*次にデータを入れるべき番地*/
004720 0000 0000        74 s0:		.ds.l	1			/*キューに溜まっているデータの数*/
                        75 
004724 0000 0000        76 top1:		.ds.b	255			/*キューの戦闘の番地*/
       0000 0000        76 
       0000 0000        76 
       0000 0000        76 
       0000 0000        76 
004823 00               77 bottom1:	.ds.b	1			/*キューの末尾の番地*/
004824 0000 0000        78 out1:		.ds.l	1			/*次に取り出すデータのある番地*/
004828 0000 0000        79 in1:		.ds.l	1 			/*次にデータを入れるべき番地*/
00482c 0000 0000        80 s1:		.ds.l	1			/*キューに溜まっているデータの数*/
                        81 	
004830 0000 0000        82 out_data:	 .ds.l 	300
       0000 0000        82 
       0000 0000        82 
       0000 0000        82 
       0000 0000        82 
004ce0 0000 0000        83 out_status:	 .ds.l 	300
       0000 0000        83 
       0000 0000        83 
       0000 0000        83 
       0000 0000        83 
005190 0000 0000        84 in_status:	 .ds.l 	300
       0000 0000        84 
       0000 0000        84 
       0000 0000        84 
       0000 0000        84 
005640 0000 0000        85 in_data:	 .ds.l	300
       0000 0000        85 
       0000 0000        85 
       0000 0000        85 
       0000 0000        85 
                        86 
                        87 ***************************************************************
                        88 ** 初期化
                        89 ** 内部デバイスレジスタには特定の値が設定されている．
                        90 ** その理由を知るには，付録 B にある各レジスタの仕様を参照すること．
                        91 ***************************************************************
                        92 .section .text
                        93 .even
                        94 boot: * スーパーバイザ & 各種設定を行っている最中の割込禁止
000400 46FC 2700        95 move.w #0x2700,%SR
000404 4FF9 0000        96 lea.l SYS_STK_TOP, %SP | Set SSP
       0000             96 
                        97 ****************
                        98 ** 割り込みコントローラの初期化
                        99 ****************
00040a 13FC 0040       100 move.b #0x40, IVR | ユーザ割り込みベクタ番号を0x40+level に設定．
       00FF F300       100 
000412 21FC 0000       101 move.l #sousin ,0x110
       0000 0110       101 
00041a 23FC 00FF       102 move.l #Mask_UART1,IMR | 送受信割り込み許可
       3FFB 00FF       102 
       F304            102 
                       103 ****************
                       104 ** 送受信 (UART1) 関係の初期化 (割り込みレベルは 4 に固定されている)
                       105 ****************
000424 33FC 0000       106 move.w #U_Reset, USTCNT1 | リセット
       00FF F900       106 
00042c 33FC E10C       107 move.w #U_Pullonly, USTCNT1 |　受信割り込み許可
       00FF F900       107 
000434 33FC 0038       108 move.w #0x0038, UBAUD1 | baud rate = 230400 bps
       00FF F902       108 
                       109 ****************
                       110 ** タイマ関係の初期化 (割り込みレベルは 6 に固定されている)
                       111 *****************
00043c 33FC 0004       112 move.w #0x0004, TCTL1 | restart, 割り込み不可,
       00FF F600       112 
                       113 | システムクロックの 1/16 を単位として計時，a
                       114 | タイマ使用停止
                       115 
                       116 **キュー初期化
000444 48E7 0080       117 	movem.l	%a0,-(%sp)	/*走行レベルの退避*/
000448 46FC 2700       118 	move.w 	#0x2700,%SR		/*割り込み禁止(走行レベル7)*/
00044c 41F9 0000       119 	lea.l	top0,%a0
       0000            119 
000452 23C8 0000       120 	move.l	%a0,in0
       0000            120 
000458 23C8 0000       121 	move.l  %a0,out0
       0000            121 
00045e 23FC 0000       122 	move.l	#0,s0
       0000 0000       122 
       0000            122 
000468 41F9 0000       123 	lea.l	top1,%a0
       0000            123 
00046e 23C8 0000       124 	move.l	%a0,in1
       0000            124 
000474 23C8 0000       125 	move.l  %a0,out1
       0000            125 
00047a 23FC 0000       126 	move.l	#0,s1
       0000 0000       126 
       0000            126 
000484 4CDF 0100       127 	movem.l (%sp)+,%a0      /* 走行レベルの復帰 */
                       128 **スタックレジスタ操作
000488 46FC 1000       129 move.w #0x1000, %SR
00048c 6000 0002       130 bra MAIN
                       131 ***************************************************************
                       132 **現段階での初期化ルーチンの正常動作を確認するため，最後に ’a’ を
                       133 **送信レジスタ UTX1 に書き込む．’a’ が出力されれば，OK.
                       134 ***************************************************************
                       135 .section .text
                       136 .even
                       137 MAIN:
000490 6000 FFFE       138 LOOP: bra LOOP
                       139 
                       140 INQ:
                       141 	**	番号noのキューにデータをいれる
                       142 	**	入力 no->d0.l	書き込む8bitdata->d1.b
                       143 	**	出力 失敗0/成功1 ->d0.l
000494 48E7 00C0       144 	movem.l	%a0/%a1,-(%sp)	/*走行レベルの退避*/
000498 46FC 2700       145 	move.w 	#0x2700,%SR		/*割り込み禁止(走行レベル7)*/
00049c 0C80 0000       146 	cmp.l 	#0,%d0			/*キュー番号が0*/
       0000            146 
0004a2 6700 0010       147 	beq	INQ0
0004a6 0C80 0000       148 	cmp.l 	#1,%d0			/*キュー番号が1*/
       0001            148 
0004ac 6700 004A       149 	beq	INQ1
0004b0 4EFA 0132       150 	jmp	Queue_fail		/*キュー番号が存在しない*/
                       151 
                       152 	
                       153 INQ0:	
0004b4 0CB9 0000       154 	cmp.l	#256,s0
       0100 0000       154 
       0000            154 
0004be 6700 0124       155 	beq	Queue_fail		/*キューが満杯で失敗*/
0004c2 2079 0000       156 	move.l	in0,%a0			
       0000            156 
0004c8 1081            157 	move.b	%d1,(%a0)		/*データをキューに書き込み*/
0004ca 43F9 0000       158 	lea.l	bottom0,%a1
       0000            158 
0004d0 B1C9            159 	cmp.l	%a1,%a0
0004d2 6700 000C       160 	beq	INQ0_step1		/*in==bottomのときin=top*/
0004d6 52B9 0000       161 	add.l	#1,in0			/*in++*/
       0000            161 
0004dc 4EFA 000C       162 	jmp	INQ0_step2
                       163 
                       164 INQ0_step1:
0004e0 23F9 0000       165 	move.l top0,in0
       0000 0000       165 
       0000            165 
                       166 
                       167 INQ0_step2:
0004ea 52B9 0000       168 	add.l	#1,s0 			/*s++*/
       0000            168 
0004f0 7001            169 	move.l	#1,%d0			/*成功を報告*/
0004f2 4CDF 0300       170 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
0004f6 4E75            171 	rts
                       172 
                       173 INQ1:	
0004f8 0CB9 0000       174 	cmp.l	#256,s1
       0100 0000       174 
       0000            174 
000502 6700 00E0       175 	beq	Queue_fail		/*キューが満杯で失敗*/
000506 2079 0000       176 	move.l	in1,%a0			
       0000            176 
00050c 1081            177 	move.b	%d1,(%a0)		/*データをキューに書き込み*/
00050e 43F9 0000       178 	lea.l	bottom1,%a1
       0000            178 
000514 B1C9            179 	cmp.l	%a1,%a0
000516 6700 000C       180 	beq	INQ1_step1		/*in==bottomのときin=top*/
00051a 52B9 0000       181 	add.l	#1,in1			/*in++*/
       0000            181 
000520 4EFA 000C       182 	jmp	INQ1_step2
                       183 
                       184 INQ1_step1:
000524 23F9 0000       185 	move.l top1,in1
       0000 0000       185 
       0000            185 
                       186 
                       187 INQ1_step2:
00052e 52B9 0000       188 	add.l	#1,s1 			/*s++*/
       0000            188 
000534 7001            189 	move.l	#1,%d0			/*成功を報告*/
000536 4CDF 0300       190 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
00053a 4E75            191 	rts
                       192 
                       193 
                       194 OUTQ:
                       195 	**	番号noのキューからデータを一つ取り出す
                       196 	**	入力 no->d0.l
                       197 	**	出力 失敗0/成功1 ->d0.l		取り出した8bitdata ->d1.b
00053c 48E7 00C0       198 	movem.l	%a0/%a1,-(%sp)	/*走行レベルの退避*/
000540 46FC 2700       199 	move.w 	#0x2700,%SR		/*割り込み禁止(走行レベル7)*/
000544 0C80 0000       200 	cmp.l 	#0,%d0			/*キュー番号が0*/
       0000            200 
00054a 6700 0010       201 	beq	OUTQ0
00054e 0C80 0000       202 	cmp.l 	#1,%d0			/*キュー番号が1*/
       0001            202 
000554 6700 004A       203 	beq	OUTQ1
000558 4EFA 008A       204 	jmp	Queue_fail		/*キュー番号が存在しない*/
                       205 	
                       206 
                       207 OUTQ0:	
00055c 0CB9 0000       208 	cmp.l	#0,s0
       0000 0000       208 
       0000            208 
000566 6700 007C       209 	beq	Queue_fail		/*キューが満杯で失敗*/
00056a 2079 0000       210 	move.l	out0,%a0			
       0000            210 
000570 1210            211 	move.b	(%a0),%d1		/*データをキューから取り出し*/
000572 43F9 0000       212 	lea.l	bottom0,%a1
       0000            212 
000578 B1C9            213 	cmp.l	%a1,%a0
00057a 6700 000C       214 	beq	OUTQ0_step1		/*out==bottomのときout=top*/
00057e 52B9 0000       215 	add.l	#1,out0			/*out++*/
       0000            215 
000584 4EFA 000C       216 	jmp	OUTQ0_step2
                       217 
                       218 OUTQ0_step1:
000588 23F9 0000       219 	move.l top0,out0
       0000 0000       219 
       0000            219 
                       220 
                       221 OUTQ0_step2:
000592 53B9 0000       222 	sub.l	#1,s0 			/*s--*/
       0000            222 
000598 7001            223 	move.l	#1,%d0			/*成功を報告*/
00059a 4CDF 0300       224 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
00059e 4E75            225 	rts
                       226 
                       227 OUTQ1:	
0005a0 0CB9 0000       228 	cmp.l	#0,s1
       0000 0000       228 
       0000            228 
0005aa 6700 0038       229 	beq	Queue_fail		/*キューが満杯で失敗*/
0005ae 2079 0000       230 	move.l	out1,%a0			
       0000            230 
0005b4 1210            231 	move.b	(%a0),%d1		/*データをキューから取り出し*/
0005b6 43F9 0000       232 	lea.l	bottom1,%a1
       0000            232 
0005bc B1C9            233 	cmp.l	%a1,%a0
0005be 6700 000C       234 	beq	OUTQ1_step1		/*out==bottomのときout=top*/
0005c2 52B9 0000       235 	add.l	#1,out1			/*out++*/
       0000            235 
0005c8 4EFA 000C       236 	jmp	OUTQ1_step2
                       237 
                       238 OUTQ1_step1:
0005cc 23F9 0000       239 	move.l top1,out1
       0000 0000       239 
       0000            239 
                       240 
                       241 OUTQ1_step2:
0005d6 53B9 0000       242 	sub.l	#1,s1 			/*s--*/
       0000            242 
0005dc 7001            243 	move.l	#1,%d0			/*成功を報告*/
0005de 4CDF 0300       244 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
0005e2 4E75            245 	rts
                       246 
                       247 	
                       248 Queue_fail:
0005e4 7000            249 	move.l #0,%d0			/*失敗の報告*/
0005e6 4CDF 0300       250 	movem.l (%sp)+,%a0/%a1		/*走行レベルの回復*/
0005ea 4E75            251 	rts
                       252 interupt:
0005ec 48E7 7FFF       253 	movem.l %a0-%a7/%d1-%d7, -(%sp)
0005f0 3039 00FF       254 	move.w URX1, %d0
       F904            254 
0005f6 0640 0800       255 	add.w #0x0800,%d0
0005fa 33C0 00FF       256 	move.w %d0,UTX1
       F906            256 
000600 4CDF FFFE       257 	movem.l (%sp)+,%a0-%a7/%d1-%d7
000604 4E73            258 	rte
                       259 sousin:
000606 48E7 7FFF       260 	movem.l %a0-%a7/%d1-%d7, -(%sp)
00060a 33FC 0862       261 	move.w #0x0800+'b',UTX1
       00FF F906       261 
000612 4CDF FFFE       262 	movem.l (%sp)+,%a0-%a7/%d1-%d7
000616 4E73            263 	rte
                       264 .end
